---
description: 
globs: 
alwaysApply: false
---
# Documentation Standards

## JSDoc Comments

Always use JSDoc comments for functions, classes, and interfaces, especially for public APIs. Follow this format:

```typescript
/**
 * Description of what the function does
 * 
 * @param {ParamType} paramName - Description of the parameter
 * @returns {ReturnType} Description of the return value
 * @throws {ErrorType} Description of when this error is thrown
 * 
 * @example
 * // Example of how to use the function
 * const result = myFunction('input');
 */
function myFunction(paramName: ParamType): ReturnType {
  // implementation
}
```

## Component Documentation

For React components, document props using JSDoc:

```typescript
/**
 * A button component with customizable styles and behaviors
 * 
 * @param {ButtonProps} props - The component props
 * @returns {JSX.Element} The rendered button
 * 
 * @example
 * <Button 
 *   variant="primary" 
 *   onClick={() => console.log('Clicked')}
 * >
 *   Click Me
 * </Button>
 */
function Button(props: ButtonProps): JSX.Element {
  // implementation
}
```

## File Headers

Add a header comment to each file describing its purpose:

```typescript
/**
 * @file User authentication service
 * @description Handles user login, registration, and session management
 */
```

## Complex Logic

For complex logic, add explanatory comments:

```typescript
// Calculate the weighted average based on recent activity
// Items from the last 24 hours are weighted 3x
// Items from the last week are weighted 2x
// All other items have normal weight
function calculateRelevanceScore(items: Activity[]): number {
  // implementation
}
```

## TODO Comments

Format TODO comments consistently and include:
- The issue that needs to be addressed
- Why it's not addressed now (if applicable)
- Who is responsible (if known)

```typescript
// TODO(github-username): Implement proper error handling here 
// when the error service is completed - Issue #123
```

## Inline Documentation

Use inline comments sparingly, only when necessary to explain non-obvious code:

```typescript
// Use a guard clause to handle edge cases early
if (!user) return undefined;

// Format is: lastName, firstName (title)
const displayName = `${user.lastName}, ${user.firstName}${user.title ? ` (${user.title})` : ''}`;
```
